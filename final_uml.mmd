classDiagram
direction TB
    class Game {
        -Player player1
        -Player player2
        -Player currentPlayer
        -int turn
        -bool gameOver
        -bool testingMode
        -string deck1File
        -string deck2File
        -string initFile
        -CommandParser parser
        -TriggerManager triggerManager
        +Game(int argc, char** argv)
        +void startGame()
        +void nextTurn()
        +void processCommand(string command)
        +void checkWinCondition()
        +bool isGameOver()
        +void displayBoard()
        +Player* getPlayer1()
        +Player* getPlayer2()
        +TriggerManager& getTriggerManager()
        +Player* getActivePlayer()
        +Player* getInactivePlayer()
        +void parseCommandLineArgs(int argc, char** argv)
        +bool isTestingMode()
    }

    class CommandParser {
        +CommandParser()
        +void execute(string command, Game* game)
        +bool isValidCommand(string input, Game* game)
        +void handleTestingCommands(string command, Game* game)
        +Target parseTarget(string input)
    }

    class Target {
        -int playerNum
        -int position
        -bool isRitual
        -bool isPlayer
        +Target()
        +Target(int player, int pos, bool ritual)
        +Target(int player)
        +bool isValidTarget(Game* game)
        +Card* getTargetCard(Game* game)
        +Minion* getTargetMinion(Game* game)
        +bool Ritual()
        +int getPosition()
        +int getPlayerNum()
        +bool targetsPlayer()
    }

    class Player {
        -string name
        -int life
        -int magic
        -Hand hand
        -Deck deck
        -Board board
        -Graveyard graveyard
        -Ritual* ritual
        +Player(string name)
        +string getName()
        +void drawCard()
        +void drawCard(Game* game)
        +void loadDeck(string filename)
        +void shuffleDeck()
        +void playCard(int index, Target target, Game* game)
        +void takeDamage(int damage)
        +void heal(int amount)
        +bool isDead()
        +void startTurn()
        +void endTurn()
        +void restoreMinionsActions()
        +void setRitual(Ritual* newRitual)
        +void gainMagic(int amount)
        +bool canAfford(int cost)
        +void payMagic(int cost)
        +Hand& getHand()
        +Deck& getDeck()
        +Board& getBoard()
        +Graveyard& getGraveyard()
        +Ritual* getRitual()
        +int getLife()
        +int getMagic()
        +void setMagic(int amount)
    }

    class Hand {
        -vector~unique_ptr~Card~~ cards
        -static int MAX_SIZE = 5
        +Hand()
        +void addCard(unique_ptr~Card~ card)
        +unique_ptr~Card~ removeCard(int index)
        +bool isFull()
        +int size()
        +void display()
        +Card* getCard(int index)
    }

    class Deck {
        -vector~unique_ptr~Card~~ cards
        +Deck()
        +void addCard(unique_ptr~Card~ card)
        +unique_ptr~Card~ drawCard()
        +void shuffle()
        +bool isEmpty()
        +int size()
        +void display()
        +void loadFromFile(string filename)
    }

    class Board {
        -vector~unique_ptr~Minion~~ minions
        -static int MAX_MINIONS = 5
        +Board()
        +void addMinion(unique_ptr~Minion~ minion)
        +unique_ptr~Minion~ removeMinion(int index)
        +Minion* getMinion(int index)
        +bool isFull()
        +int size()
        +void display()
        +void restoreActions()
        +vector~Minion*~ getMinions()
        +unique_ptr~Minion~ removeMinion(Minion* minion)
        +void replaceMinion(int index, unique_ptr~Minion~ newMinion)
    }

    class Graveyard {
        -vector~unique_ptr~Minion~~ deadMinions
        +Graveyard()
        +void addMinion(unique_ptr~Minion~ minion)
        +unique_ptr~Minion~ removeTop()
        +Minion* getTop()
        +bool isEmpty()
        +int size()
        +void display()
    }

    class Card {
        #string name
        #int cost
        #Player* owner
        #string description
        +Card(string name, int cost, string desc)
        +virtual ~Card()
        +virtual void play(Target target, Game* game) = 0
        +virtual unique_ptr~Card~ clone() = 0
        +virtual string getType() = 0
        +virtual bool requiresTarget()
        +void setOwner(Player* player)
        +string getName()
        +int getCost()
        +string getDescription()
        +Player* getOwner()
    }

    class Spell {
        +Spell(string name, int cost, string desc)
        +virtual void play(Target target, Game* game) = 0
        +virtual unique_ptr~Card~ clone() = 0
        +string getType()
        +virtual bool requiresTarget()
    }

    class Minion {
        #int baseAttack
        #int baseDefence
        #int currentActions
        #unique_ptr~EnchantmentList~ enchantments
        #unique_ptr~TriggeredAbility~ triggeredAbility
        #unique_ptr~AbilityCommand~ activatedAbility
        +Minion(string name, int cost, int att, int def, string desc)
        +virtual void play(Target target, Game* game)
        +unique_ptr~Card~ clone()
        +string getType()
        +virtual void attackPlayer(Player* target, Game* game)
        +virtual void attackMinion(Minion* target, Game* game)
        +virtual void takeDamage(int damage, Game* game)
        +virtual void die(Game* game)
        +void restoreActions()
        +bool hasActions()
        +void useAction()
        +void setTriggeredAbility(unique_ptr~TriggeredAbility~ ability)
        +bool hasTriggeredAbility()
        +TriggeredAbility* getTriggeredAbility()
        +string getTriggeredDescription()
        +void setActivatedAbility(unique_ptr~AbilityCommand~ ability)
        +void useAbility(Target target, Game* game)
        +bool hasActivatedAbility()
        +int getAbilityCost(int abilityIndex)
        +bool isAbilitySilenced()
        +string getAbilityDescription(int abilityIndex)
        +virtual int getAttack()
        +virtual int getDefence()
        +int getActions()
        +void setAttack(int att)
        +void setDefence(int def)
        +void setActions(int act)
        +void addEnchantment(unique_ptr~EnchantmentDecorator~ enchantment)
        +void removeTopEnchantment()
        +bool hasEnchantments()
        +vector~unique_ptr~EnchantmentDecorator~~ getEnchantments()
    }

    class Enchantment {
        +Enchantment(string name, int cost, string desc)
        +void play(Target target, Game* game)
        +unique_ptr~Card~ clone()
        +string getType()
        +bool requiresTarget()
    }

    class EnchantmentDecorator {
        +EnchantmentDecorator()
        +virtual ~EnchantmentDecorator()
        +virtual int getModifiedAttack(int baseAttack) = 0
        +virtual int getModifiedDefence(int baseDefence) = 0
        +virtual int getModifiedActions(int baseActions) = 0
        +virtual int getModifiedAbilityCost(int baseCost) = 0
        +virtual bool isAbilitySilenced() = 0
        +virtual string getName() = 0
    }

    class EnchantmentList {
        -vector~unique_ptr~EnchantmentDecorator~~ enchantments
        +EnchantmentList()
        +void addEnchantment(unique_ptr~EnchantmentDecorator~ enchantment)
        +void removeTopEnchantment()
        +bool hasEnchantments()
        +vector~unique_ptr~EnchantmentDecorator~~ getEnchantments()
    }

    class Ritual {
        -int charges
        -int actionCost
        -unique_ptr~TriggerObserver~ triggerObserver
        +Ritual(string name, int cost, string desc, int initialCharges, int activationCost)
        +void play(Target target, Game* game)
        +unique_ptr~Card~ clone()
        +string getType()
        +void trigger(Game* game)
        +bool canActivate()
        +void useCharges(int amount)
        +int getCharges()
        +void addCharges(int amount)
        +int getActivationCost()
        +void addTriggerObserver(TriggerObserver* observer)
        +void setupTrigger(Player* owner)
        +TriggerObserver* getTriggerObserver()
    }

    class AbilityCommand {
        #string description
        #int cost
        +AbilityCommand(string desc, int cost)
        +virtual ~AbilityCommand()
        +virtual void execute(Target target, Game* game) = 0
        +virtual unique_ptr~AbilityCommand~ clone() = 0
        +int getCost()
        +string getDescription()
    }

    class ActivatedAbility {
        -function~void(Target, Game*)~ abilityFunction
        +ActivatedAbility(string desc, int cost, function~void(Target, Game*)~ func)
        +void execute(Target target, Game* game)
        +unique_ptr~AbilityCommand~ clone()
    }

    class TriggerObserver {
        #string description
        #int cost
        #string triggerType
        +TriggerObserver(string desc, int cost, string trigger)
        +virtual ~TriggerObserver()
        +virtual void notify(string event, Game* game) = 0
        +virtual void notifyMinionEvent(string event, Game* game, Minion* minion)
        +virtual Ritual* getRitual()
        +bool matchesTrigger(string eventType)
        +string getTriggerType()
        +int getCost()
        +string getDescription()
    }

    class TriggeredAbility {
        +TriggeredAbility(string desc, int cost, string trigger)
        +void notify(string event, Game* game)
        +virtual void execute(Game* game) = 0
        +virtual unique_ptr~TriggeredAbility~ clone() = 0
    }

    class TriggerManager {
        -vector~unique_ptr~TriggerObserver~~ allObservers
        -Minion* currentEnteringMinion
        +TriggerManager()
        +void registerObserver(unique_ptr~TriggerObserver~ observer)
        +void unregisterObserver(TriggerObserver* observer)
        +void notifyStartOfTurn(Player* player, Game* game)
        +void notifyEndOfTurn(Player* player, Game* game)
        +void notifyMinionEnters(Minion* minion, Game* game)
        +void notifyMinionLeaves(Minion* minion, Game* game)
        +Minion* getCurrentEnteringMinion()
        +void processInAPNAPOrder(string event, Game* game)
        +void clearAll()
    }

    class CardFactory {
        +static unique_ptr~Card~ createCard(string name)
        +static void initializeCards()
    }

    class GameDisplay {
        +static void displayBoard(Player* p1, Player* p2)
        +static void displayHand(Player* player)
        +static void displayCard(Card* card)
        +static void displayMinion(Minion* minion)
        +static void displayEnchantments(Minion* minion)
        +static void displayHelp()
        +static void displayGameOver(string reason)
        +static string cardToString(Card* card)
        +static void loadAsciiArt()
        -static card_template_t getCardTemplate(Card* card)
        -static void displayTopRow(Player* player)
        -static void displayBottomRow(Player* player)
        -static void displayMinionRow(Player* player)
        -static void displayCenterGraphic()
        -static void displayCardsHorizontally(vector~card_template_t~ cards)
    }

    %% Specific Card Classes
    class Banish {
        +Banish(string name, int cost, string desc)
        +unique_ptr~Card~ clone()
        +void play(Target target, Game* game)
    }

    class Blizzard {
        +Blizzard(string name, int cost, string desc)
        +unique_ptr~Card~ clone()
        +void play(Target target, Game* game)
        +bool requiresTarget()
    }

    class Disenchant {
        +Disenchant(string name, int cost, string desc)
        +unique_ptr~Card~ clone()
        +void play(Target target, Game* game)
    }

    class RaiseDead {
        +RaiseDead(string name, int cost, string desc)
        +unique_ptr~Card~ clone()
        +void play(Target target, Game* game)
        +bool requiresTarget()
    }

    class Recharge {
        +Recharge(string name, int cost, string desc)
        +unique_ptr~Card~ clone()
        +void play(Target target, Game* game)
        +bool requiresTarget()
    }

    class Unsummon {
        +Unsummon(string name, int cost, string desc)
        +unique_ptr~Card~ clone()
        +void play(Target target, Game* game)
    }

    %% Specific Enchantment Classes
    class Enrage {
        +Enrage()
        +unique_ptr~Card~ clone()
        +void play(Target target, Game* game)
    }

    class EnrageDecorator {
        +EnrageDecorator()
        +int getModifiedAttack(int baseAttack)
        +int getModifiedDefence(int baseDefence)
        +int getModifiedActions(int baseActions)
        +int getModifiedAbilityCost(int baseCost)
        +bool isAbilitySilenced()
        +string getName()
    }

    class GiantStrength {
        +GiantStrength()
        +unique_ptr~Card~ clone()
        +void play(Target target, Game* game)
    }

    class GiantStrengthDecorator {
        +GiantStrengthDecorator()
        +int getModifiedAttack(int baseAttack)
        +int getModifiedDefence(int baseDefence)
        +int getModifiedActions(int baseActions)
        +int getModifiedAbilityCost(int baseCost)
        +bool isAbilitySilenced()
        +string getName()
    }

    class Haste {
        +Haste()
        +unique_ptr~Card~ clone()
        +void play(Target target, Game* game)
    }

    class HasteDecorator {
        +HasteDecorator()
        +int getModifiedAttack(int baseAttack)
        +int getModifiedDefence(int baseDefence)
        +int getModifiedActions(int baseActions)
        +int getModifiedAbilityCost(int baseCost)
        +bool isAbilitySilenced()
        +string getName()
    }

    class MagicFatigue {
        +MagicFatigue()
        +unique_ptr~Card~ clone()
        +void play(Target target, Game* game)
    }

    class MagicFatigueDecorator {
        +MagicFatigueDecorator()
        +int getModifiedAttack(int baseAttack)
        +int getModifiedDefence(int baseDefence)
        +int getModifiedActions(int baseActions)
        +int getModifiedAbilityCost(int baseCost)
        +bool isAbilitySilenced()
        +string getName()
    }

    class Silence {
        +Silence()
        +unique_ptr~Card~ clone()
        +void play(Target target, Game* game)
    }

    class SilenceDecorator {
        +SilenceDecorator()
        +int getModifiedAttack(int baseAttack)
        +int getModifiedDefence(int baseDefence)
        +int getModifiedActions(int baseActions)
        +int getModifiedAbilityCost(int baseCost)
        +bool isAbilitySilenced()
        +string getName()
    }

    %% Specific Trigger Classes
    class AuraPowerTrigger {
        -Player* owner
        -Ritual* ritual
        +AuraPowerTrigger(Ritual* ritual)
        +void execute(Game* game)
        +Ritual* getRitual()
        +unique_ptr~TriggeredAbility~ clone()
    }

    class BoneGolemTrigger {
        -Minion* source
        +BoneGolemTrigger(Minion* src)
        +unique_ptr~TriggeredAbility~ clone()
        +void execute(Game* game)
    }

    class DarkRitualTrigger {
        -Player* owner
        -Ritual* ritual
        +DarkRitualTrigger(Ritual* ritual)
        +void execute(Game* game)
        +Ritual* getRitual()
        +unique_ptr~TriggeredAbility~ clone()
    }

    class FireElementalTrigger {
        -Minion* source
        +FireElementalTrigger(Minion* src)
        +unique_ptr~TriggeredAbility~ clone()
        +void execute(Game* game)
    }

    class PotionSellerTrigger {
        -Minion* source
        +PotionSellerTrigger(Minion* src)
        +unique_ptr~TriggeredAbility~ clone()
        +void execute(Game* game)
    }

    class StandstillTrigger {
        -Player* owner
        -Ritual* ritual
        +StandstillTrigger(Ritual* ritual)
        +void execute(Game* game)
        +Ritual* getRitual()
        +unique_ptr~TriggeredAbility~ clone()
    }

    %% Abstract Classes
    <<abstract>> Card
    <<abstract>> EnchantmentDecorator
    <<abstract>> AbilityCommand
    <<abstract>> TriggerObserver
    <<abstract>> TriggeredAbility

    %% Relationships
    Game *-- Player
    Game *-- CommandParser
    Game *-- TriggerManager

    Player *-- Hand
    Player *-- Deck
    Player *-- Board
    Player *-- Graveyard
    Player o-- Ritual
    
    Minion *-- EnchantmentList
    Minion o-- TriggeredAbility
    Minion o-- AbilityCommand

    Ritual o-- TriggerObserver

    TriggerManager *-- TriggerObserver

    EnchantmentList *-- EnchantmentDecorator

    %% Inheritance
    Card <|-- Spell
    Card <|-- Minion
    Card <|-- Enchantment
    Card <|-- Ritual

    Spell <|-- Banish
    Spell <|-- Blizzard
    Spell <|-- Disenchant
    Spell <|-- RaiseDead
    Spell <|-- Recharge
    Spell <|-- Unsummon

    Enchantment <|-- Enrage
    Enchantment <|-- GiantStrength
    Enchantment <|-- Haste
    Enchantment <|-- MagicFatigue
    Enchantment <|-- Silence

    EnchantmentDecorator <|-- EnrageDecorator
    EnchantmentDecorator <|-- GiantStrengthDecorator
    EnchantmentDecorator <|-- HasteDecorator
    EnchantmentDecorator <|-- MagicFatigueDecorator
    EnchantmentDecorator <|-- SilenceDecorator

    AbilityCommand <|-- ActivatedAbility

    TriggerObserver <|-- TriggeredAbility

    TriggeredAbility <|-- AuraPowerTrigger
    TriggeredAbility <|-- BoneGolemTrigger
    TriggeredAbility <|-- DarkRitualTrigger
    TriggeredAbility <|-- FireElementalTrigger
    TriggeredAbility <|-- PotionSellerTrigger
    TriggeredAbility <|-- StandstillTrigger

    %% Associations
    Hand o-- Card
    Deck o-- Card
    Board o-- Minion
    Graveyard o-- Minion
    CommandParser o-- Target
    Game o-- CardFactory
    Game o-- GameDisplay
